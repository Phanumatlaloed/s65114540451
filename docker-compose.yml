services:
  db:
    image: postgres:16
    container_name: pgdb
    environment:
      TZ: Asia/Bangkok
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
   
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  web:
    build: .
    container_name: web
    env_file:
      - .env
    environment:
      TZ: Asia/Bangkok
      PYTHONUNBUFFERED: "1"
    ports:
      - "${EXTERNAL_WEB_PORT}:8080"  # เข้าเว็บที่ http://localhost:10451 (พอร์ตตนเอง 1XXXX)
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c '
        echo "⏳ waiting for postgres at ${DB_HOST:-db}:${DB_PORT:-5432} ...";
        i=0; until nc -z "${DB_HOST:-db}" "${DB_PORT:-5432}"; do
          i=$$((i+1)); [ $$i -ge 60 ] && echo "❌ DB not ready in 60s" && exit 1;
          echo "... retry $$i"; sleep 1;
        done;
        python manage.py migrate --noinput || exit 1;
        python manage.py collectstatic --noinput || true;
        exec gunicorn project.wsgi:application \
          --bind 0.0.0.0:8080 \
          --workers ${GUNICORN_WORKERS:-3} \
          --timeout ${GUNICORN_TIMEOUT:-60} \
          --max-requests ${GUNICORN_MAX_REQUESTS:-1000} \
          --max-requests-jitter ${GUNICORN_MAX_REQUESTS_JITTER:-50}
      '
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 8080 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

volumes:
  pg_data: {}
