from django import forms
from .models import Member, CommunityGroup, GroupPost, UserProfile
from .models import Post, Seller, Product, CustomUser, Post, PostMedia, ShippingAddress
from django.core.exceptions import ValidationError
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserChangeForm, PasswordChangeForm

User = get_user_model()  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser

class MemberForm(forms.ModelForm):
    class Meta:
        model = Member
        fields = ['gender', 'date_of_birth']  # ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô Member ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

from django.contrib.auth.models import User

class UserForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'password']
class AccountEditForm(forms.ModelForm):
    class Meta:
        model = Member
        fields = ['gender', 'date_of_birth']
        widgets = {
            'date_of_birth': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'gender': forms.Select(attrs={'class': 'form-control'}),
        }

class PasswordChangeForm(forms.Form):
    current_password = forms.CharField(
        label="Current Password",
        widget=forms.PasswordInput(attrs={'class': 'form-control'}),
    )
    new_password = forms.CharField(
        label="New Password",
        widget=forms.PasswordInput(attrs={'class': 'form-control'}),
    )
    confirm_new_password = forms.CharField(
        label="Confirm New Password",
        widget=forms.PasswordInput(attrs={'class': 'form-control'}),
    )

    def __init__(self, user, *args, **kwargs):
        self.user = user
        super().__init__(*args, **kwargs)

    def clean_current_password(self):
        current_password = self.cleaned_data.get("current_password")
        if not self.user.check_password(current_password):
            raise forms.ValidationError("The current password is incorrect.")
        return current_password

    def clean(self):
        cleaned_data = super().clean()
        new_password = cleaned_data.get("new_password")
        confirm_new_password = cleaned_data.get("confirm_new_password")

        if new_password != confirm_new_password:
            raise forms.ValidationError("The new passwords do not match.")
        return cleaned_data
    
class CommunityGroupForm(forms.ModelForm):
    class Meta:
        model = CommunityGroup
        fields = ['name', 'description', 'rules', 'image']

class GroupPostForm(forms.ModelForm):
    class Meta:
        model = GroupPost
        fields = ['content', 'image', 'video']
class AccountEditForm(forms.ModelForm):
    class Meta:
        model = Member
        fields = ['gender', 'date_of_birth', 'profile_picture'] #‡πÄ‡∏û‡∏¥‡πà‡∏° profile_picture ‡πÉ‡∏ô fields
        widgets = {
            'date_of_birth': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'gender': forms.Select(attrs={'class': 'form-control'}),
        }


class UserProfileForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ['profile_picture'] #‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏ß‡πâ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'description', 'price', 'stock', 'image', 'category']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'description': forms.Textarea(attrs={'class': 'form-control'}),
            'price': forms.NumberInput(attrs={'class': 'form-control'}),
            'stock': forms.NumberInput(attrs={'class': 'form-control'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
            'category': forms.Select(attrs={'class': 'form-control'}),  # ‚úÖ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        }

from django import forms
from .models import Seller, CustomUser
class SellerForm(forms.ModelForm):
    email = forms.EmailField(
        required=True,
        widget=forms.EmailInput(attrs={'class': 'form-control'}),
        error_messages={'required': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•'}
    )

    class Meta:
        model = Seller
        fields = ['store_name', 'email', 'store_image', 'contact_info']
        widgets = {
            'store_name': forms.TextInput(attrs={"class": "form-control"}),
            'contact_info': forms.Textarea(attrs={"class": "form-control"}),
        }




class CustomUserForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ['username', 'password1', 'password2']
        widgets = {
            'username': forms.TextInput(attrs={"class": "form-control"}),
            'password1': forms.PasswordInput(attrs={"class": "form-control"}),
            'password2': forms.PasswordInput(attrs={"class": "form-control"}),
        }
CustomUser = get_user_model()

class SelleruserUpdateForm(UserChangeForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User) """
    class Meta:
        model = CustomUser
        fields = ['username', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
        }

class SelleruserPasswordUpdateForm(PasswordChangeForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (User) """
    old_password = forms.CharField(
        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°'})
    )
    new_password1 = forms.CharField(
        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'})
    )
    new_password2 = forms.CharField(
        widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'})
    )

class SellerUpdateForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ """
    class Meta:
        model = Seller
        fields = ['store_name', 'contact_info', 'store_image']
        widgets = {
            'store_name': forms.TextInput(attrs={'class': 'form-control'}),
            'contact_info': forms.Textarea(attrs={'class': 'form-control', 'rows': 4}),
            'store_image': forms.ClearableFileInput(attrs={'class': 'form-control'}),
        }
class CustomUserForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ['username', 'password1', 'password2']  # ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà username ‡πÅ‡∏•‡∏∞ email

class UserEditForm(forms.ModelForm):
    class Meta:
        model = CustomUser  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser ‡πÅ‡∏ó‡∏ô User
        fields = ['username', 'first_name', 'last_name', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
        }
class CustomUserCreationForm(UserCreationForm):
    email = forms.EmailField(
        required=True,
        widget=forms.EmailInput(attrs={'class': 'form-control'}),
        error_messages={'required': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•'}
    )

    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password1', 'password2']


from django import forms
from .models import Post, PostMedia

class EditPostForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏û‡∏™‡∏ï‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°) """
    class Meta:
        model = Post
        fields = ['content']

class ShippingAddressForm(forms.ModelForm):
    class Meta:
        model = ShippingAddress
        fields = ['address', 'city', 'postal_code', 'phone_number']  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° city ‡πÅ‡∏•‡∏∞ postal_code
        labels = {
            'address': 'üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
            'city': 'üèô ‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
            'postal_code': 'üìÆ ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå',
            'phone_number': 'üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        }



from .models import Report

class ReportForm(forms.ModelForm):
    class Meta:
        model = Report
        fields = ['reason', 'description']


class AdminRegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.is_staff = True  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô staff ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if commit:
            user.save()
        return user
    
#class ShippingAddressForm(forms.ModelForm):
   # class Meta:
      #  model = ShippingAddress
      #  fields = ['address', 'phone_number']
      #  labels = {
       #     'address': 'üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
       #     'phone_number': 'üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
      #  }

from .models import Report

class ReportForm(forms.ModelForm):
    class Meta:
        model = Report
        fields = ['reason', 'description']


class AdminRegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = CustomUser
        fields = ['username', 'email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.is_staff = True  # ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô staff ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if commit:
            user.save()
        return user

class ShippingAddressForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á """
    class Meta:
        model = ShippingAddress
        fields = ['address', 'phone_number', 'city', 'postal_code']
        labels = {
            'address': 'üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
            'phone_number': 'üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
            'city': 'üèô ‡πÄ‡∏°‡∏∑‡∏≠‡∏á',
            'postal_code': 'üìÆ ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå',
        }
        widgets = {
            'address': forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'placeholder': '‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...'}),
            'phone_number': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'}),
            'city': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á'}),
            'postal_code': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå'}),
        }
    
    def clean_phone_number(self):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á """
        phone_number = self.cleaned_data.get('phone_number')
        if not phone_number.isdigit():
            raise forms.ValidationError("‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        if len(phone_number) < 9 or len(phone_number) > 15:
            raise forms.ValidationError("‚ö†Ô∏è ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 9-15 ‡∏ï‡∏±‡∏ß")
        return phone_number

    def clean_postal_code(self):
        """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå """
        postal_code = self.cleaned_data.get('postal_code')
        if not postal_code.isdigit():
            raise forms.ValidationError("‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        if len(postal_code) not in [5, 6]:
            raise forms.ValidationError("‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 5 ‡∏´‡∏£‡∏∑‡∏≠ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        return postal_code
    
# ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
class UserProfileForm(forms.ModelForm):
    class Meta:
        model = CustomUser  # ‚úÖ ‡πÉ‡∏ä‡πâ CustomUser
        fields = ['first_name', 'last_name', 'email']
        widgets = {
            'first_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ä‡∏∑‡πà‡∏≠'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'}),
            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•'}),
        }

# ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Seller)
class SellerUpdateForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ """
    class Meta:
        model = Seller
        fields = ("store_name", "store_image", "contact_info", "bank_name", "bank_account_name", "bank_account_number")
        widgets = {
            'store_name': forms.TextInput(attrs={'class': 'form-control'}),
            'contact_info': forms.Textarea(attrs={'class': 'form-control'}),
            'store_image': forms.ClearableFileInput(attrs={'class': 'form-control'}),
            'bank_name': forms.Select(attrs={'class': 'form-control'}),  # ‚úÖ dropdown
            'bank_account_name': forms.TextInput(attrs={'class': 'form-control'}),
            'bank_account_number': forms.TextInput(attrs={'class': 'form-control'}),
        }


from django import forms
from django.contrib.auth.forms import UserChangeForm
from .models import CustomUser, Seller

class CustomUserUpdateForm(UserChangeForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏ä‡∏∑‡πà‡∏≠, username) """
    password = None  # ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô

    class Meta:
        model = CustomUser
        fields = ("username", "email", "first_name", "last_name")

class SellerProfileUpdateForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ """
    class Meta:
        model = Seller
        fields = ("store_name", "store_image", "contact_info")

from django import forms
from .models import RefundRequest, Order

class RefundRequestForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô """
    class Meta:
        model = RefundRequest
        fields = ['bank_name', 'account_number', 'account_name', 'refund_reason', 'payment_proof']

class RefundProofForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô """
    class Meta:
        model = RefundRequest
        fields = ["refund_proof"]
        widgets = {
            "refund_proof": forms.FileInput(attrs={"class": "form-control"}),
        }

class RefundProofUploadForm(forms.ModelForm):
    class Meta:
        model = RefundRequest
        fields = ["payment_proof"]

from django import forms
from .models import WithdrawalRequest

class WithdrawalForm(forms.ModelForm):
    class Meta:
        model = WithdrawalRequest
        fields = ["amount"]
class WithdrawalProofForm(forms.ModelForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô """
    class Meta:
        model = WithdrawalRequest
        fields = ["payment_proof"]
        widgets = {
            "payment_proof": forms.FileInput(attrs={"class": "form-control"}),
        }

from django import forms
from .models import Comment
class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={'class': 'form-control', 'rows': 2, 'placeholder': 'Write a comment...'}),
        }

from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import get_user_model

class CustomPasswordChangeForm(PasswordChangeForm):
    """ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° """
    
    class Meta:
        model = get_user_model()
        fields = ('old_password', 'new_password1', 'new_password2')

class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = Member  # ‚úÖ ‡πÉ‡∏ä‡πâ Member ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ 'date_of_birth' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'birthdate'
        fields = ['profile_picture', 'date_of_birth', 'gender']  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö models.py
        widgets = {
            'date_of_birth': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),  # ‚úÖ ‡πÉ‡∏ä‡πâ date_of_birth
            'gender': forms.Select(attrs={'class': 'form-control'}),
        }

