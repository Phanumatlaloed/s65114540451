document.addEventListener("DOMContentLoaded", function () {
    console.log("‚úÖ Comment System Loaded!");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ
    let currentUserProfilePic = '/static/images/default-profile.png'; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let currentUsername = '';

    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DOM
    try {
        const profileImgElement = document.querySelector('.comment-form .comment-form-avatar img');
        if (profileImgElement) {
            currentUserProfilePic = profileImgElement.src;
        }
        
        const usernameElement = document.querySelector('.welcome-logout b');
        if (usernameElement) {
            currentUsername = usernameElement.textContent;
        }
        
        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ", currentUsername, currentUserProfilePic);
    } catch (error) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:", error);
    }

    // ===== ADD COMMENT =====
    document.querySelectorAll(".comment-form").forEach(form => {
        form.addEventListener("submit", async function (e) {
            e.preventDefault();
            const postId = form.dataset.postId;
            const groupId = form.dataset.groupId; // ‡∏î‡∏∂‡∏á Group ID
            const contentInput = form.querySelector("input[name='content']");
            const content = contentInput.value.trim();
            const csrfToken = document.querySelector("[name='csrfmiddlewaretoken']").value;

            if (!content) return;

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
            try {
                const formProfileImg = form.querySelector('.comment-form-avatar img');
                if (formProfileImg) {
                    currentUserProfilePic = formProfileImg.src;
                }
            } catch (error) {
                console.warn("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏ó‡∏ô");
            }

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö URL pattern ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô path
            const url = groupId 
                ? `/group_post/${postId}/add_comment/` // ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                : `/group_post/${postId}/add_comment/`;

            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-CSRFToken": csrfToken
                    },
                    body: JSON.stringify({ content })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", data);

                if (data.success) {
                    const commentsList = document.getElementById(`comments-${postId}`);
                    const newComment = document.createElement("div");
                    newComment.className = "comment-item d-flex";
                    newComment.id = `comment-${data.comment_id}`;
                    newComment.setAttribute("data-comment-id", data.comment_id);

                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á comment ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                    newComment.innerHTML = `
                        <div class="comment-avatar">
                            <img src="${currentUserProfilePic}" alt="${currentUsername}" onerror="this.src='/static/images/default-profile.png'">
                        </div>
                        <div class="comment-content">
                            <div class="comment-bubble own-comment">
                                <div class="comment-author">${data.comment.user || currentUsername}</div>
                                <div class="comment-text">${data.comment.content}</div>
                            </div>
                            <div class="comment-meta">
                                <span class="comment-time">‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</span>
                                <div class="comment-actions">
                                    <button class="action-btn edit-comment" data-comment-id="${data.comment_id}">
                                        <i class="fas fa-edit"></i> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                    </button>
                                    <button class="action-btn delete-comment" data-comment-id="${data.comment_id}">
                                        <i class="fas fa-trash"></i> ‡∏•‡∏ö
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô" ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    const noComments = commentsList.querySelector('.no-comments');
                    if (noComments) {
                        noComments.remove();
                    }
                    
                    commentsList.appendChild(newComment);
                    contentInput.value = "";
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
                    const commentCount = form.closest('.comments').querySelector('.comments-count');
                    if (commentCount) {
                        const count = parseInt(commentCount.textContent) + 1;
                        commentCount.textContent = count;
                    }

                    console.log("‚úÖ ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°: ", data.comment_id);
                } else {
                    alert(data.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ");
                }
            } catch (error) {
                console.error("‚ùå Error:", error);
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô");
            }
        });
    });

    // ===== DELETE COMMENT =====
    document.addEventListener("click", async function (event) {
        const btn = event.target.closest(".delete-comment");
        if (btn) {
            const commentId = btn.dataset.commentId;
            if (!commentId || commentId === "undefined") {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment ID");
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment ID");
                return;
            }

            if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?")) {
                const csrfToken = document.querySelector("[name='csrfmiddlewaretoken']").value;
                const commentElement = document.getElementById(`comment-${commentId}`);
                const commentForm = commentElement.closest('.comments').querySelector('.comment-form');
                const groupId = commentForm ? commentForm.dataset.groupId : '';
                
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö URL pattern ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô path
                const url = groupId 
                    ? `/community/${groupId}/group_comment/${commentId}/delete/` // ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ path
                    : `/group_comment/${commentId}/delete/`;

                try {
                    const response = await fetch(url, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-CSRFToken": csrfToken
                        }
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    if (data.success) {
                        if (commentElement) {
                            commentElement.style.opacity = "0";
                            commentElement.style.transition = "opacity 0.3s ease";
                            setTimeout(() => {
                                commentElement.remove();
                                
                                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
                                const commentCount = commentForm.closest('.comments').querySelector('.comments-count');
                                if (commentCount) {
                                    const count = Math.max(0, parseInt(commentCount.textContent) - 1);
                                    commentCount.textContent = count;
                                    
                                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                                    if (count === 0) {
                                        const commentsList = commentElement.closest('.comments-list');
                                        const noCommentsElement = document.createElement('div');
                                        noCommentsElement.className = 'no-comments';
                                        noCommentsElement.innerHTML = `
                                            <i class="fas fa-comment-slash"></i>
                                            <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô!</p>
                                        `;
                                        commentsList.appendChild(noCommentsElement);
                                    }
                                }
                            }, 300);
                        }
                    } else {
                        alert(data.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ");
                    }
                } catch (error) {
                    console.error("‚ùå Error:", error);
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô");
                }
            }
        }
    });

    // ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
    document.addEventListener("click", async function (event) {
        const btn = event.target.closest(".edit-comment");
        if (btn) {
            const commentId = btn.dataset.commentId;
            if (!commentId || commentId === "undefined") {
                console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment ID");
                alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö Comment ID");
                return;
            }

            const commentEl = document.getElementById(`comment-${commentId}`);
            const commentTextEl = commentEl.querySelector(".comment-text");
            const originalContent = commentTextEl.textContent;
            const commentBubble = commentEl.querySelector(".comment-bubble");
            const commentMeta = commentEl.querySelector(".comment-meta");
            
            // ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            commentBubble.style.display = "none";
            commentMeta.style.display = "none";
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            const commentContent = commentEl.querySelector(".comment-content");
            const editForm = document.createElement("div");
            editForm.className = "comment-edit-form";
            editForm.innerHTML = `
                <div class="edit-form-container">
                    <div class="edit-input-wrapper">
                        <input type="text" value="${originalContent}" class="edit-input" placeholder="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô...">
                    </div>
                    <div class="edit-actions">
                        <button type="button" class="save-edit-btn">
                            <i class="fas fa-check"></i> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                        </button>
                        <button type="button" class="cancel-btn">
                            <i class="fas fa-times"></i> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                        </button>
                    </div>
                </div>
            `;
            commentContent.appendChild(editForm);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS inline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            const style = document.createElement('style');
            style.textContent = `
                .comment-edit-form {
                    margin-top: 8px;
                    margin-bottom: 8px;
                    width: 100%;
                }
                .edit-form-container {
                    background-color: #f8f9fa;
                    border-radius: 18px;
                    padding: 10px 15px;
                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
                }
                .edit-input-wrapper {
                    margin-bottom: 8px;
                }
                .edit-input {
                    width: 100%;
                    border: 1px solid #ced4da;
                    border-radius: 20px;
                    padding: 8px 15px;
                    font-size: 14px;
                    transition: all 0.2s ease;
                }
                .edit-input:focus {
                    outline: none;
                    border-color: #ff9ed5;
                    box-shadow: 0 0 0 2px rgba(255, 105, 180, 0.2);
                }
                .edit-actions {
                    display: flex;
                    justify-content: flex-end;
                    gap: 8px;
                }
                .save-edit-btn, .cancel-btn {
                    border: none;
                    border-radius: 20px;
                    padding: 5px 12px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    display: flex;
                    align-items: center;
                    gap: 5px;
                }
                .save-edit-btn {
                    background-color: #ff69b4;
                    color: white;
                }
                .save-edit-btn:hover {
                    background-color: #ff5ba7;
                }
                .cancel-btn {
                    background-color: #e9ecef;
                    color: #495057;
                }
                .cancel-btn:hover {
                    background-color: #dee2e6;
                }
            `;
            document.head.appendChild(style);
            
            // Auto focus input
            const editInput = editForm.querySelector(".edit-input");
            editInput.focus();
            editInput.setSelectionRange(editInput.value.length, editInput.value.length);
            
            // Cancel button handler
            const cancelBtn = editForm.querySelector(".cancel-btn");
            cancelBtn.addEventListener("click", function() {
                commentBubble.style.display = "block";
                commentMeta.style.display = "flex";
                editForm.remove();
            });
            
            // Save button handler
            const saveBtn = editForm.querySelector(".save-edit-btn");
            saveBtn.addEventListener("click", async function() {
                const newContent = editInput.value.trim();
                if (!newContent) return;
                
                const csrfToken = document.querySelector("[name='csrfmiddlewaretoken']").value;
                const commentForm = commentEl.closest('.comments').querySelector('.comment-form');
                const groupId = commentForm ? commentForm.dataset.groupId : '';
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó (‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
                const url = groupId 
                    ? `/group_comment/${commentId}/edit/` // ‡πÉ‡∏ä‡πâ path ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                    : `/group_comment/${commentId}/edit/`;
                
                try {
                    saveBtn.disabled = true;
                    saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
                    
                    const response = await fetch(url, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-CSRFToken": csrfToken
                        },
                        body: JSON.stringify({ content: newContent })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    if (data.success) {
                        commentTextEl.textContent = newContent;
                        commentBubble.style.display = "block";
                        commentMeta.style.display = "flex";
                        editForm.remove();
                        
                        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå highlight ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                        commentBubble.style.backgroundColor = "#fffacd";
                        setTimeout(() => {
                            commentBubble.style.transition = "background-color 1s ease";
                            commentBubble.style.backgroundColor = "";
                        }, 100);
                    } else {
                        alert(data.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ");
                    }
                } catch (error) {
                    console.error("‚ùå Error:", error);
                    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô");
                } finally {
                    saveBtn.disabled = false;
                    saveBtn.innerHTML = '<i class="fas fa-check"></i> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å';
                }
            });
        }
    });
});